/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package codicefiscale;

import org.junit.Test;

import codicefiscale.Citizen.Gender;

import static org.junit.Assert.*;

import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;

public class LibraryTest {
    @Test public void testCalculateTIN() {
        String name = "Mario";
        String surname = "Rossi";
        Date dateOfBirth = Date.from(
            LocalDate.of(1980, 1, 1).atStartOfDay(
                ZoneId.systemDefault()
            ).toInstant()
        );
        PlaceOfBirth placeOfBirth = new City("Milano", new Code("F205"), "MI");
        Citizen citizen = new Citizen(
            name, surname, dateOfBirth, Gender.MALE, placeOfBirth
        );
        assertEquals(
            "The calculated code should be correct.",
            new TIN("RSSMRA80A01F205X"),
            LibTIN.calculateTIN(citizen)
        );
    }
    
    @Test public void testCalculateTIN2() {
        String name = "Mattia";
        String surname = "Morellato";
        Date dateOfBirth = Date.from(
            LocalDate.of(1989, 3, 11).atStartOfDay(
                ZoneId.systemDefault()
            ).toInstant()
        );
        PlaceOfBirth placeOfBirth = new City("", new Code("L725"), "VE");
        Citizen citizen = new Citizen(
            name, surname, dateOfBirth, Gender.MALE, placeOfBirth
        );
        assertEquals(
            "The calculated code should be correct.",
            new TIN("MRLMTT89C11L725F"),
            LibTIN.calculateTIN(citizen)
        );
    }
    
    @Test public void testReverseTIN() {
        TIN tin = new TIN("RSSMRA80A01F205X");
        Date dateOfBirthExpected = Date.from(
            LocalDate.of(1980, 1, 1).atStartOfDay(
                ZoneId.systemDefault()
            ).toInstant()
        );
        PlaceOfBirth placeOfBirthExpected = new City(
            "Milano", new Code("F205"), "MI"
        );
        List<PlaceOfBirth> allPOB = new ArrayList<>();
        allPOB.add(placeOfBirthExpected);
        assertEquals(
            "The date of birth extraction should work.",
            dateOfBirthExpected,
            LibTIN.getDateOfBirth(tin)
        );
        assertEquals(
            "The place of birth extraction should work.",
            placeOfBirthExpected,
            LibTIN.getPlaceOfBirth(tin, allPOB)
        );
        assertEquals(
            "The gender extraction should work.",
            Gender.MALE,
            LibTIN.getGender(tin)
        );
    }
}
